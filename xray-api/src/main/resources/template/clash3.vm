mixed-port: 7890
allow-lan: false
mode: rule
log-level: info
ipv6: false
external-controller: 0.0.0.0:9090

dns:
  enable: true
  listen: 127.0.0.1:5311
  ipv6: false
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
#当dns解析出现问题时，打开如下配置
#  fallback:
#    - 自己的DNS
#  fallback-filter:
#    geoip: false
#    geoip-code: CN
#    ipcidr:
#      -192.168.0.1/16
#    domain:
#      - 需要走自己的DNS的域名，如：'*.test.com'

proxies:
#foreach($server in $servers)
  #if($server.protocol == "vmess")
  - {name: $server.serverName, server: $server.clientDomain, port: $server.clientPort, type: vmess, uuid: $account.uuid, alterId: $account.maxConnection, cipher: auto, tls: true, skip-cert-verify: false, network: ws, ws-opts: {path: $server.wsPath, headers: {Host: $server.clientDomain}}, udp: false, client-fingerprint: chrome}
  #elseif($server.protocol == "trojan")
  - {name: $server.serverName, server: $server.clientDomain, port: $server.clientPort, type: trojan, password: $account.uuid, sni: $server.clientDomain, skip-cert-verify: false, udp: false, client-fingerprint: chrome}
  #elseif($server.protocol == "vless")
  - {name: $server.serverName, server: $server.clientDomain, port: $server.clientPort, type: vless, uuid: $account.uuid, tls: true, skip-cert-verify: false, network: tcp, udp: false, client-fingerprint: chrome}
  #end
#end

#set($inclueItems = ["vmess", "trojan", "vless"])
#set($supportSevers = [])
#foreach($item in $servers)
  #if($inclueItems.contains($item.protocol))
    #set($result = $supportSevers.add($item))
  #end
#end
#set($delimiter = $lineSeparator)
#set($serverNames = "")
#foreach($item in $servers)
  #if($inclueItems.contains($item.protocol))
    #set($serverNames = "$serverNames      - $item.serverName$delimiter")
  #end
#end
proxy-groups:
  - name: 🔰 代理
    type: select
    proxies:
      - ♻️ 自动选择
      - 🎯 直连
$serverNames

  - name: ♻️ 自动选择
    type: url-test
    url: http://www.gstatic.com/generate_204
    interval: 300
    proxies:
$serverNames

  - name: 🐳 OpenAI
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: 💰 PayPal
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: 🛍 亚马逊
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: 🐶 谷歌
    type: select
    proxies:
      - 🔰 代理
      - ♻️ 自动选择
      - 🎯 直连
$serverNames

  - name: 🏖 YouTube
    type: select
    proxies:
      - 🔰 代理
      - ♻️ 自动选择
      - 🎯 直连
$serverNames

  - name: 👔️ 微软
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: ☁️ iCloud
    type: select
    proxies:
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 🍎 苹果
    type: select
    proxies:
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 🎯 直连
    type: select
    proxies:
      - DIRECT

  - name: 🚫 拦截
    type: select
    proxies:
      - REJECT
      - DIRECT

#set($ruleList = [
  {"name":"Applications", "group":"🎯 直连"},
  {"name":"MyReject", "group":"🚫 拦截"},
  {"name":"MyProxy", "group":"🔰 代理"},
  {"name":"MyDirect", "group":"🎯 直连"},
  {"name":"OpenAI", "group":"🐳 OpenAI"},
  {"name":"Amazon", "group":"🛍 亚马逊"},
  {"name":"PayPal", "group":"💰 PayPal"},
  {"name":"Google", "group":"🐶 谷歌"},
  {"name":"YouTube", "group":"🏖 YouTube"},
  {"name":"Microsoft", "group":"👔️ 微软"},
  {"name":"iCloud", "group":"☁️ iCloud"},
  {"name":"Apple", "group":"🍎 苹果"},
  {"name":"Private", "group":"🎯 直连"},
  {"name":"Reject", "group":"🚫 拦截"},
  {"name":"TelegramCidr", "group":"🔰 代理"}
])
#if ($whitelist == true)
  - name: ⛳️ 其他
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames
  #set($tmp = $ruleList.add({"name":"Direct", "group":"🎯 直连"}))
#else
  - name: ⛳️ 其他
    type: select
    proxies:
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
$serverNames
  #set($tmp = $ruleList.add({"name":"Proxy", "group":"🔰 代理"}))
#end

rules:
#foreach( $rule in $ruleList)
  - RULE-SET,$rule.name,$rule.group
#end
  - MATCH,⛳️ 其他

rule-providers:
##  AdvertisingLite:
##    type: http
##    behavior: classical
##    url: "$rootUrl/subscribe/rules/clash2/AdvertisingLite.list"
##    path: ./ruleset/AdvertisingLite.yaml
##    interval: 86400
##
##  AdvertisingLiteDomain:
##    type: http
##    behavior: domain
##    url: "$rootUrl/subscribe/rules/clash2/AdvertisingLiteDomain.list"
##    path: ./ruleset/AdvertisingLiteDomain.yaml
##    interval: 86400
##
#foreach( $rule in $ruleList)
  $rule.name:
    type: http
    behavior: classical
    url: "$rootUrl/subscribe/rules/clash2/${rule.name}.list"
    path: ./ruleset/${rule.name}.yaml
    interval: 86400

#end