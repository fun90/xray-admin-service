port: 7890
socks-port: 7891
allow-lan: true
mode: Rule
log-level: info
external-controller: :9090

dns:
  enable: true
  listen: 127.0.0.1:5311
  ipv6: false
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
  #当dns解析出现问题时，打开如下配置
  #  fallback:
  #    - 自己的DNS
  #  fallback-filter:
  #    geoip: false
  #    geoip-code: CN
  #    ipcidr:
  #      -192.168.0.1/16
  #    domain:
  #      - 需要走自己的DNS的域名，如：'*.test.com'

#set($ruleList = [
  {"name":"Applications", "group":"🎯 直连"},
  {"name":"MyReject", "group":"🚫 拦截"},
  {"name":"MyProxy", "group":"🔰 代理"},
  {"name":"MyDirect", "group":"🎯 直连"},
  {"name":"OpenAI", "group":"🐳 OpenAI"},
  {"name":"Amazon", "group":"🛍 亚马逊"},
  {"name":"PayPal", "group":"💰 PayPal"},
  {"name":"Google", "group":"🐶 谷歌"},
  {"name":"YouTube", "group":"🏖 YouTube"},
  {"name":"Microsoft", "group":"👔️ 微软"},
  {"name":"iCloud", "group":"☁️ iCloud"},
  {"name":"Apple", "group":"🍎 苹果"},
  {"name":"Private", "group":"🎯 直连"},
  {"name":"Reject", "group":"🚫 拦截"},
  {"name":"TelegramCidr", "group":"🔰 代理"}
])
rules:
#if ($whitelist)
  #set($tmp = $ruleList.add({"name":"Direct", "group":"🎯 直连"}))
#else
  #set($tmp = $ruleList.add({"name":"Proxy", "group":"🔰 代理"}))
#end
#foreach($rule in $ruleList)
#set($ruleFileName = $rule.name + ".list")
$rulesParser.content("$ruleFileName", "$rule.group")
#end
#if (!$whitelist)
- GEOIP,LAN,DIRECT
- GEOIP,CN,DIRECT
#end
  - MATCH,⛳️ 其他

proxies:
#foreach($server in $servers)
  #if($server.protocol == "vmess")
  - {name: $server.serverName, server: $server.clientDomain, port: $server.clientPort, type: vmess, uuid: $account.uuid, alterId: $account.maxConnection, cipher: auto, tls: true, skip-cert-verify: false, network: ws, ws-opts: {path: $server.wsPath, headers: {Host: $server.clientDomain}}, udp: false}
  #elseif($server.protocol == "trojan")
  - {name: $server.serverName, server: $server.clientDomain, port: $server.clientPort, type: trojan, password: $account.uuid, sni: $server.clientDomain, skip-cert-verify: false, udp: false}
  #end
#end

#set($inclueItems = ["vmess", "trojan"])
#set($supportSevers = [])
#foreach($item in $servers)
  #if($inclueItems.contains($item.protocol))
    #set($result = $supportSevers.add($item))
  #end
#end
#set($delimiter = $lineSeparator)
#set($serverNames = "")
#foreach($item in $supportSevers)
  #if($inclueItems.contains($item.protocol))
    #set($serverNames = "$serverNames      - $item.serverName$delimiter")
  #end
#end
proxy-groups:
  - name: 🔰 代理
    type: select
    proxies:
      - ♻️ 自动选择
      - 🎯 直连
$serverNames

  - name: ♻️ 自动选择
    type: url-test
    url: http://www.gstatic.com/generate_204
    interval: 300
    proxies:
$serverNames

  - name: 🐳 OpenAI
    type: select
    proxies:
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 💰 PayPal
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: 🛍 亚马逊
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: 🐶 谷歌
    type: select
    proxies:
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 🏖 YouTube
    type: select
    proxies:
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 👔️ 微软
    type: select
    proxies:
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
$serverNames

  - name: ☁️ iCloud
    type: select
    proxies:
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 🍎 苹果
    type: select
    proxies:
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
$serverNames

  - name: 🎯 直连
    type: select
    proxies:
      - DIRECT

  - name: 🚫 拦截
    type: select
    proxies:
      - REJECT
      - DIRECT

  - name: ⛳️ 其他
    type: select
    proxies:
#if ($whitelist == true)
      - 🔰 代理
      - 🎯 直连
      - ♻️ 自动选择
#else
      - 🎯 直连
      - 🔰 代理
      - ♻️ 自动选择
#end
$serverNames