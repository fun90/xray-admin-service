// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/freedom/config.proto

package com.xray.proxy.freedom;

public final class ConfigOuterClass {
  private ConfigOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_DestinationOverride_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_DestinationOverride_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_xray_proxy_freedom_Config_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_xray_proxy_freedom_Config_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032proxy/freedom/config.proto\022\022xray.proxy" +
      ".freedom\032!common/protocol/server_spec.pr" +
      "oto\"K\n\023DestinationOverride\0224\n\006server\030\001 \001" +
      "(\0132$.xray.common.protocol.ServerEndpoint" +
      "\"\377\001\n\006Config\022B\n\017domain_strategy\030\001 \001(\0162).x" +
      "ray.proxy.freedom.Config.DomainStrategy\022" +
      "\023\n\007timeout\030\002 \001(\rB\002\030\001\022E\n\024destination_over" +
      "ride\030\003 \001(\0132\'.xray.proxy.freedom.Destinat" +
      "ionOverride\022\022\n\nuser_level\030\004 \001(\r\"A\n\016Domai" +
      "nStrategy\022\t\n\005AS_IS\020\000\022\n\n\006USE_IP\020\001\022\013\n\007USE_" +
      "IP4\020\002\022\013\n\007USE_IP6\020\003BX\n\026com.xray.proxy.fre" +
      "edomP\001Z\'github.com/xtls/xray-core/proxy/" +
      "freedom\252\002\022Xray.Proxy.Freedomb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.xray.common.protocol.ServerSpec.getDescriptor(),
        }, assigner);
    internal_static_xray_proxy_freedom_DestinationOverride_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_xray_proxy_freedom_DestinationOverride_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_DestinationOverride_descriptor,
        new java.lang.String[] { "Server", });
    internal_static_xray_proxy_freedom_Config_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_xray_proxy_freedom_Config_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_xray_proxy_freedom_Config_descriptor,
        new java.lang.String[] { "DomainStrategy", "Timeout", "DestinationOverride", "UserLevel", });
    com.xray.common.protocol.ServerSpec.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
